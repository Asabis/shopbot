import logging
import sqlite3
import sys
import telebot
from telebot import types
import uuid
from config import API_TOKEN, DB_NAME

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# Constants for buttons and commands
SHOPPING_LIST = "üõçÔ∏è –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫"
CLEAR_LIST = "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫"
SHARE_LIST = "üîó –û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å–ø–∏—Å–∫–∏"
ABOUT_APP = "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"
MY_ID = "üë§ –ú–æ–π ID"

# Initialize bot
bot = telebot.TeleBot(API_TOKEN)

# Helper function for database operations
def execute_query(query, params=(), fetch=False, fetchone=False, lastrowid=False):
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute(query, params)
        if lastrowid:
            rowid = cursor.lastrowid
            conn.commit()
            conn.close()
            return rowid
        elif fetchone:
            result = cursor.fetchone()
            conn.close()
            return result
        elif fetch:
            result = cursor.fetchall()
            conn.close()
            return result
        else:
            conn.commit()
            conn.close()
            return None
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")
        return None

# Create necessary database tables
def create_tables():
    execute_query('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT
        )
    ''')
    execute_query('''
        CREATE TABLE IF NOT EXISTS groups (
            group_id INTEGER PRIMARY KEY AUTOINCREMENT,
            group_name TEXT
        )
    ''')
    execute_query('''
        CREATE TABLE IF NOT EXISTS user_groups (
            user_id INTEGER,
            group_id INTEGER,
            PRIMARY KEY (user_id, group_id)
        )
    ''')
    execute_query('''
        CREATE TABLE IF NOT EXISTS lists (
            rowid INTEGER PRIMARY KEY AUTOINCREMENT,
            group_id INTEGER,
            item TEXT
        )
    ''')

# Escape markdown special characters
def escape_markdown(text):
    escape_chars = '_*[]()~`>#+-=|{}.!'
    return ''.join(['\\' + char if char in escape_chars else char for char in text])

# Main menu keyboard
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(SHOPPING_LIST, CLEAR_LIST)
    markup.add(SHARE_LIST)
    markup.add(MY_ID, ABOUT_APP)
    return markup

# Start command handler
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    username = message.from_user.username or ''
    first_name = message.from_user.first_name or ''

    # Save user to the database
    execute_query("INSERT OR IGNORE INTO users (user_id, username, first_name) VALUES (?, ?, ?)",
                  (user_id, username, first_name))

    # If user is not in any group, create a new group
    group = execute_query("SELECT group_id FROM user_groups WHERE user_id = ?", (user_id,), fetchone=True)
    if not group:
        try:
            # Create new group
            new_group_id = execute_query("INSERT INTO groups (group_name) VALUES (?)",
                                         (f"Group_{user_id}",), lastrowid=True)
            # Link user to the new group
            execute_query("INSERT INTO user_groups (user_id, group_id) VALUES (?, ?)", (user_id, new_group_id))
        except sqlite3.Error as e:
            logger.error(f"Error creating new group: {e}")

    send_main_menu(message)

# Send the main menu
def send_main_menu(message):
    """Send the main menu message to the user."""
    description = (
        "‚ú® *–ü—Ä–∏–≤–µ—Ç!* –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –ø–æ–∫—É–ø–æ–∫!\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚ûï *–î–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã* –≤ —Å–ø–∏—Å–æ–∫.\n"
        "üìã *–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫*.\n"
        "üóëÔ∏è *–£–¥–∞–ª—è—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã*.\n"
        "üîó *–û–±—ä–µ–¥–∏–Ω—è—Ç—å —Å–ø–∏—Å–∫–∏* —Å –¥—Ä—É–∑—å—è–º–∏.\n"
        "üë§ *–£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID*.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:"
    )
    bot.send_message(message.chat.id, description, reply_markup=main_menu(), parse_mode="Markdown")

# Get group ID of the user
def get_group_id(user_id):
    """Return the group ID for the given user."""
    group = execute_query(
        "SELECT group_id FROM user_groups WHERE user_id = ?",
        (user_id,),
        fetchone=True
    )
    if group:
        return group[0]
    else:
        # If user doesn't have a group, create a new one
        try:
            new_group_id = execute_query("INSERT INTO groups (group_name) VALUES (?)",
                                         (f"Group_{user_id}",), lastrowid=True)
            execute_query("INSERT INTO user_groups (user_id, group_id) VALUES (?, ?)", (user_id, new_group_id))
            return new_group_id
        except sqlite3.Error as e:
            logger.error(f"Error creating new group: {e}")
            return None

# Send a text-based "animation" for adding/deleting items
def send_animation(chat_id, action):
    """Send a loading text-based animation when adding or deleting items."""
    if action == "add":
        bot.send_message(chat_id, "üîÑ *–î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç...*", parse_mode="Markdown")
    elif action == "delete":
        bot.send_message(chat_id, "üîÑ *–£–¥–∞–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç...*", parse_mode="Markdown")

# Notify group members about changes
def notify_group_users(group_id, message_text, actor_id):
    """Notify users in the group about changes, excluding the actor."""
    users = execute_query(
        "SELECT user_id FROM user_groups WHERE group_id = ?",
        (group_id,),
        fetch=True
    )

    if users:
        for user in users:
            user_id = user[0]
            if user_id != actor_id:
                try:
                    bot.send_message(user_id, message_text, parse_mode="Markdown")
                except telebot.apihelper.ApiTelegramException as e:
                    if e.error_code == 403:
                        logger.error(f"Cannot send message to user {user_id}: {e.description}")
                    else:
                        logger.error(f"Error sending message to user {user_id}: {e.description}")
    else:
        logger.error(f"No users found in group {group_id}")

# Handle sharing the list (merging groups)
@bot.message_handler(func=lambda message: message.text == SHARE_LIST)
def share_list(message):
    """Prompt the user to merge their list with another user."""
    bot.send_message(message.chat.id, "ü§ù *–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å–ø–∏—Å–∫–∏:*", parse_mode="Markdown")
    bot.register_next_step_handler(message, merge_with_user)

def merge_with_user(message):
    """Handle merging lists with another user."""
    try:
        target_id = int(message.text)
        user_id = message.from_user.id

        # Prevent merging with self
        if target_id == user_id:
            bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π.", reply_markup=main_menu())
            return

        # Check if the target user has started the bot
        try:
            user_info = bot.get_chat(target_id)
            if user_info.type != 'private':
                bot.send_message(message.chat.id, "‚ùå –ù–µ–ª—å–∑—è –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å –±–æ—Ç–æ–º –∏–ª–∏ –≥—Ä—É–ø–ø–æ–π.", reply_markup=main_menu())
                return
            # Additionally check that the user is not a bot
            bot_info = bot.get_me()
            if user_info.id == bot_info.id:
                bot.send_message(message.chat.id, "‚ùå –ù–µ–ª—å–∑—è –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å –±–æ—Ç–æ–º.", reply_markup=main_menu())
                return
        except telebot.apihelper.ApiTelegramException as e:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start –±–æ—Ç—É.", reply_markup=main_menu())
            return

        user_group_id = get_group_id(user_id)
        target_group_id = get_group_id(target_id)

        if user_group_id != target_group_id:
            # Merge groups
            # Move all users from target_group_id to user_group_id
            execute_query("UPDATE user_groups SET group_id = ? WHERE group_id = ?", (user_group_id, target_group_id))
            # Delete old group
            execute_query("DELETE FROM groups WHERE group_id = ?", (target_group_id,))
            # Merge lists
            items_to_merge = execute_query("SELECT item FROM lists WHERE group_id = ?", (target_group_id,), fetch=True)
            for item in items_to_merge:
                execute_query("INSERT OR IGNORE INTO lists (group_id, item) VALUES (?, ?)", (user_group_id, item[0]))
            # Delete old items from list
            execute_query("DELETE FROM lists WHERE group_id = ?", (target_group_id,))

            # Notify users
            target_username = user_info.first_name or user_info.username or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
            bot.send_message(message.chat.id, f"üîó *–í–∞—à —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {escape_markdown(target_username)}!*", reply_markup=main_menu(), parse_mode="Markdown")
            bot.send_message(target_id, f"üîó *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {escape_markdown(message.from_user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')} –æ–±—ä–µ–¥–∏–Ω–∏–ª —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ —Å –≤–∞—à–∏–º!*", parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, "üîó *–í–∞—à–∏ —Å–ø–∏—Å–∫–∏ —É–∂–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã!*", reply_markup=main_menu(), parse_mode="Markdown")

    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.", reply_markup=main_menu())

# Global dictionary to store items temporarily
temp_items = {}

# Handle adding items when user inputs text
@bot.message_handler(func=lambda message: message.text not in [SHOPPING_LIST, CLEAR_LIST, SHARE_LIST, ABOUT_APP, MY_ID])
def ask_to_add(message):
    """Ask the user to confirm adding an item to the list."""
    item = message.text.strip()
    if item:
        item_id = str(uuid.uuid4())
        temp_items[item_id] = item  # Store item temporarily
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"add_{item_id}"))
        markup.add(types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel"))
        bot.send_message(message.chat.id, f'ü§î *–î–æ–±–∞–≤–∏—Ç—å* "{escape_markdown(item)}" *–≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫?*', reply_markup=markup, parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞.", reply_markup=main_menu())

# Handle adding the item to the list
@bot.callback_query_handler(func=lambda call: call.data.startswith('add_') or call.data == 'cancel')
def handle_add_item(call):
    """Handle the confirmation to add an item."""
    if call.data == 'cancel':
        bot.answer_callback_query(call.id, "üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        send_main_menu(call.message)
        return

    item_id = call.data.split('_', 1)[1]
    item = temp_items.pop(item_id, None)  # Retrieve and remove the item
    if not item:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç.")
        return

    user_id = call.from_user.id
    group_id = get_group_id(user_id)

    send_animation(call.message.chat.id, "add")

    # Add item to group's list
    execute_query("INSERT OR IGNORE INTO lists (group_id, item) VALUES (?, ?)", (group_id, item))

    # Notify group members (excluding the actor)
    notify_group_users(group_id, f'üîî *"{escape_markdown(item)}" –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫!*', user_id)

    bot.answer_callback_query(call.id, f'‚úÖ –ü—Ä–æ–¥—É–∫—Ç "{item}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫.')
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text=f'‚ú® –ü—Ä–æ–¥—É–∫—Ç "{escape_markdown(item)}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫!', parse_mode="Markdown")

    # Display the updated shopping list
    show_list(call.message)

# Handle deleting an item from the list
@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
def delete_item(call):
    """Delete an item from the group's shopping list."""
    item_id = call.data.split('_', 1)[1]
    user_id = call.from_user.id
    group_id = get_group_id(user_id)

    # Retrieve item name before deletion for notification
    item = execute_query("SELECT item FROM lists WHERE rowid = ? AND group_id = ?", (item_id, group_id), fetchone=True)
    if not item:
        bot.answer_callback_query(call.id, "‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    item = item[0]

    send_animation(call.message.chat.id, "delete")

    # Delete item from group's list
    execute_query("DELETE FROM lists WHERE rowid = ? AND group_id = ?", (item_id, group_id))

    # Notify group members (excluding the actor)
    notify_group_users(group_id, f'üîî *"{escape_markdown(item)}" –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞!*', user_id)

    bot.answer_callback_query(call.id, "üóëÔ∏è –≠–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª—ë–Ω.")

    # Display the updated shopping list
    show_list(call.message)

# Show the shopping list
@bot.message_handler(func=lambda message: message.text == SHOPPING_LIST)
def show_list(message):
    user_id = message.from_user.id
    group_id = get_group_id(user_id)

    # Fetch items from group's list
    items = execute_query(
        '''SELECT rowid, item FROM lists WHERE group_id = ?''',
        (group_id,),
        fetch=True
    )

    if items:
        item_list = ''
        markup = types.InlineKeyboardMarkup()
        for idx, (item_id, item) in enumerate(items, 1):
            item_text = f"{idx}. {item}"
            item_list += item_text + "\n"
            # Add delete button for each item
            button = types.InlineKeyboardButton(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {item}", callback_data=f"delete_{item_id}")
            markup.add(button)

        bot.send_message(message.chat.id, f"üõí *–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫*:\n\n{escape_markdown(item_list)}",
                         parse_mode="Markdown", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "üõí *–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç.*\n\n–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", parse_mode="Markdown")

    # Show main menu after displaying the list
    bot.send_message(message.chat.id, "üëá *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:*", reply_markup=main_menu(), parse_mode="Markdown")

# Clear the shopping list
@bot.message_handler(func=lambda message: message.text == CLEAR_LIST)
def clear_list(message):
    """Clear the group's shopping list."""
    user_id = message.from_user.id
    group_id = get_group_id(user_id)

    send_animation(message.chat.id, "delete")

    # Clear group's list
    execute_query("DELETE FROM lists WHERE group_id = ?", (group_id,))
    bot.send_message(message.chat.id, "üóëÔ∏è *–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –æ—á–∏—â–µ–Ω*.", reply_markup=main_menu(), parse_mode="Markdown")

    # Notify group members (excluding the actor)
    notify_group_users(group_id, f'üóëÔ∏è *–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –±—ã–ª –æ—á–∏—â–µ–Ω!*', user_id)

# About command
@bot.message_handler(func=lambda message: message.text == ABOUT_APP)
def about_app(message):
    """Provide information about the app."""
    bot.send_message(
        message.chat.id,
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*\n\n"
        "–Ø - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞–º–∏ –ø–æ–∫—É–ø–æ–∫. –° –ø–æ–º–æ—â—å—é –º–µ–Ω—è –≤—ã –º–æ–∂–µ—Ç–µ:\n\n"
        "üîπ –î–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ —Å–ø–∏—Å–æ–∫.\n"
        "üîπ –£–¥–∞–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞.\n"
        "üîπ –û–±—ä–µ–¥–∏–Ω—è—Ç—å —Å–ø–∏—Å–∫–∏ —Å –¥—Ä—É–∑—å—è–º–∏ –∏ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º–∏.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º –µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å!",
        parse_mode="Markdown",
        reply_markup=main_menu()
    )

# Show user ID
@bot.message_handler(func=lambda message: message.text == MY_ID)
def show_user_id(message):
    """Show the user's ID."""
    bot.send_message(message.chat.id, f"üÜî *–í–∞—à ID*: `{message.from_user.id}`", parse_mode="Markdown", reply_markup=main_menu())

if __name__ == "__main__":
    create_tables()
    try:
        bot.polling()
    except Exception as e:
        logger.error(f"Unhandled exception: {e}")
        sys.exit(1)
