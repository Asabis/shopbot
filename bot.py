# bot.py

import logging
import sqlite3
import telebot
from telebot import types, custom_filters
import uuid
from config import API_TOKEN, DB_NAME

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ –∫–æ–º–∞–Ω–¥
SHOPPING_LIST = "üõçÔ∏è –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫"
CLEAR_LIST = "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫"
SHARE_LIST = "üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–ø–∏—Å–∫–æ–º"
JOIN_LIST = "üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É"
VIEW_SHARED_USERS = "üë§ –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–ø–∏—Å–∫–∞"
ABOUT_APP = "‚ÑπÔ∏è –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"

COMMANDS = [
    SHOPPING_LIST,
    CLEAR_LIST,
    SHARE_LIST,
    JOIN_LIST,
    VIEW_SHARED_USERS,
    ABOUT_APP,
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(API_TOKEN)
bot.add_custom_filter(custom_filters.StateFilter(bot))


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class States:
    ADD_ITEM = "add_item"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def execute_query(query, params=(), fetch=False, fetchone=False, lastrowid=False):
    try:
        with sqlite3.connect(DB_NAME) as conn:
            conn.execute("PRAGMA foreign_keys = ON")
            cursor = conn.cursor()
            cursor.execute(query, params)
            if lastrowid:
                return cursor.lastrowid
            elif fetchone:
                return cursor.fetchone()
            elif fetch:
                return cursor.fetchall()
            return None
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise


# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def create_tables():
    execute_query(
        """
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT
        )
    """
    )
    execute_query(
        """
        CREATE TABLE IF NOT EXISTS groups (
            group_id INTEGER PRIMARY KEY AUTOINCREMENT,
            group_name TEXT,
            share_code TEXT UNIQUE
        )
    """
    )
    execute_query(
        """
        CREATE TABLE IF NOT EXISTS user_groups (
            user_id INTEGER,
            group_id INTEGER,
            PRIMARY KEY (user_id, group_id),
            FOREIGN KEY (user_id) REFERENCES users(user_id),
            FOREIGN KEY (group_id) REFERENCES groups(group_id)
        )
    """
    )
    execute_query(
        """
        CREATE TABLE IF NOT EXISTS lists (
            item_id INTEGER PRIMARY KEY AUTOINCREMENT,
            group_id INTEGER,
            item TEXT,
            FOREIGN KEY (group_id) REFERENCES groups(group_id)
        )
    """
    )


# –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
def escape_markdown(text):
    escape_chars = "_*[]()~`>#+-=|{}.!\\"
    return "".join(["\\" + char if char in escape_chars else char for char in text])


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu(has_items=True):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(SHOPPING_LIST)
    if has_items:
        markup.add(CLEAR_LIST)
    markup.add(SHARE_LIST)
    markup.add(JOIN_LIST)
    markup.add(VIEW_SHARED_USERS)
    markup.add(ABOUT_APP)
    return markup


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å Markdown –∏ –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
def send_markdown_message(chat_id, text, reply_markup=None):
    bot.send_message(
        chat_id,
        text,
        reply_markup=reply_markup or main_menu(),
        parse_mode="Markdown",
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è "–ø–µ—á–∞—Ç–∞–µ—Ç"
def send_typing_action(chat_id):
    bot.send_chat_action(chat_id, "typing")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=["start"])
def start(message):
    user_id = message.from_user.id
    username = message.from_user.username or ""
    first_name = message.from_user.first_name or ""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    execute_query(
        "INSERT OR IGNORE INTO users (user_id, username, first_name) VALUES (?, ?, ?)",
        (user_id, username, first_name),
    )

    send_welcome_message(message)


# –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
WELCOME_MESSAGE = (
    "üëã *–ü—Ä–∏–≤–µ—Ç, {first_name}!* –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *ShopBuddy* üõçÔ∏è\n\n"
    "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º–∏ —Å–ø–∏—Å–∫–∞–º–∏ –ø–æ–∫—É–ø–æ–∫ –ª–µ–≥–∫–æ –∏ —É–¥–æ–±–Ω–æ!\n\n"
    "üìå *–ß—Ç–æ —è —É–º–µ—é?*\n"
    "‚Ä¢ üìù –î–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ —Å–ø–∏—Å–æ–∫\n"
    "‚Ä¢ üìã –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫\n"
    "‚Ä¢ ‚ùå –£–¥–∞–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞\n"
    "‚Ä¢ ü§ù –û–±—ä–µ–¥–∏–Ω—è—Ç—å —Å–ø–∏—Å–∫–∏ —Å –¥—Ä—É–∑—å—è–º–∏\n\n"
    "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µüëá"
)


def send_welcome_message(message):
    text = WELCOME_MESSAGE.format(
        first_name=escape_markdown(message.from_user.first_name or "–¥—Ä—É–≥")
    )
    send_markdown_message(
        message.chat.id,
        text,
    )


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_or_create_group(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –≥—Ä—É–ø–ø—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–≤–∞—è –Ω–æ–≤—É—é, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ."""
    group = execute_query(
        "SELECT group_id FROM user_groups WHERE user_id = ?", (user_id,), fetchone=True
    )
    if group:
        return group[0]
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
        new_group_id = execute_query(
            "INSERT INTO groups (group_name) VALUES (?)",
            (f"Group_{user_id}",),
            lastrowid=True,
        )
        execute_query(
            "INSERT INTO user_groups (user_id, group_id) VALUES (?, ?)",
            (user_id, new_group_id),
        )
        return new_group_id


# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
def notify_group_users(group_id, message_text, actor_id, exclude_actor=True):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö."""
    users = execute_query(
        "SELECT user_id FROM user_groups WHERE group_id = ?", (group_id,), fetch=True
    )

    for user in users:
        user_id = user[0]
        if exclude_actor and user_id == actor_id:
            continue
        try:
            send_markdown_message(user_id, message_text)
        except telebot.apihelper.ApiTelegramException as e:
            if e.error_code == 403:
                logger.error(
                    f"–ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e.description}"
                )
            else:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e.description}"
                )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ (—Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–¥–∞ –¥–ª—è –æ–±–º–µ–Ω–∞)
@bot.message_handler(func=lambda message: message.text == SHARE_LIST)
def share_list(message):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–ø–∏—Å–∫–æ–º —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    share_code = generate_share_code(message.from_user.id)
    send_markdown_message(
        message.chat.id,
        f"üîó *–í–∞—à –∫–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞*: `{share_code}`\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥—Ä—É–≥—É, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤–∞—à–µ–º—É —Å–ø–∏—Å–∫—É.\n\n"
        '–ö–æ–≥–¥–∞ –≤–∞—à –¥—Ä—É–≥ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤, –ø—É—Å—Ç—å –Ω–∞–∂–º–µ—Ç –∫–Ω–æ–ø–∫—É *"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É"* –∏ –≤–≤–µ–¥–µ—Ç –∫–æ–¥.',
    )


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤
def generate_share_code(user_id):
    group_id = get_or_create_group(user_id)
    share_code = str(uuid.uuid4())[:8]
    execute_query(
        "UPDATE groups SET share_code = ? WHERE group_id = ?", (share_code, group_id)
    )
    return share_code


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–ø–∏—Å–∫—É
@bot.message_handler(func=lambda message: message.text == JOIN_LIST)
def join_list(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Å–ø–∏—Å–∫—É –ø–æ –∫–æ–¥—É."""
    send_markdown_message(
        message.chat.id,
        "üîë *–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–ø–∏—Å–∫—É:*",
        reply_markup=types.ReplyKeyboardRemove(),
    )
    bot.register_next_step_handler(message, process_join_code)


def process_join_code(message):
    share_code = message.text.strip()
    group = execute_query(
        "SELECT group_id FROM groups WHERE share_code = ?", (share_code,), fetchone=True
    )
    if group:
        group_id = group[0]
        user_id = message.from_user.id
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ
        existing = execute_query(
            "SELECT 1 FROM user_groups WHERE user_id = ? AND group_id = ?",
            (user_id, group_id),
            fetchone=True,
        )
        if not existing:
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –µ–≥–æ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã
            execute_query("DELETE FROM user_groups WHERE user_id = ?", (user_id,))
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
            execute_query(
                "INSERT INTO user_groups (user_id, group_id) VALUES (?, ?)",
                (user_id, group_id),
            )
            send_markdown_message(
                message.chat.id,
                "üéâ *–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–ø–∏—Å–∫—É!*",
            )
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
            notify_group_users(
                group_id,
                f"üë• *{escape_markdown(message.from_user.first_name)}* –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≤–∞—à–µ–º—É —Å–ø–∏—Å–∫—É!",
                user_id,
            )
        else:
            send_markdown_message(
                message.chat.id,
                "‚ÑπÔ∏è *–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ.*",
            )
    else:
        send_markdown_message(
            message.chat.id,
            "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.*",
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É
@bot.message_handler(func=lambda message: message.text not in COMMANDS)
def ask_to_add(message):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–æ–∫."""
    item = message.text.strip()
    if item:
        user_id = message.from_user.id
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        bot.set_state(user_id, States.ADD_ITEM, message.chat.id)
        with bot.retrieve_data(user_id, message.chat.id) as data:
            data["item"] = item
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"add_yes"))
        markup.add(types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel"))
        send_markdown_message(
            message.chat.id,
            f'üõçÔ∏è *–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä* "{escape_markdown(item)}" *–≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫?*',
            reply_markup=markup,
        )
    else:
        send_markdown_message(
            message.chat.id,
            "‚ö†Ô∏è *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞.*",
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data in ["add_yes", "cancel"])
def handle_add_item(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞."""
    user_id = call.from_user.id
    if call.data == "cancel":
        bot.delete_state(user_id, call.message.chat.id)
        handle_cancel_action(call)
        return

    with bot.retrieve_data(user_id, call.message.chat.id) as data:
        item = data.get("item")
    if not item:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç.")
        return

    group_id = get_or_create_group(user_id)

    send_typing_action(call.message.chat.id)

    # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã
    execute_query(
        "INSERT OR IGNORE INTO lists (group_id, item) VALUES (?, ?)", (group_id, item)
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
    notify_group_users(
        group_id,
        f'üõí *{escape_markdown(call.from_user.first_name)}* –¥–æ–±–∞–≤–∏–ª —Ç–æ–≤–∞—Ä "*{escape_markdown(item)}*" –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫!',
        user_id,
    )

    bot.answer_callback_query(call.id, f'‚úÖ "{item}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫.')
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f'‚úÖ –¢–æ–≤–∞—Ä *"{escape_markdown(item)}"* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫!',
        parse_mode="Markdown",
    )

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
    show_list(call.message, user_id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_"))
def delete_item(call):
    """–£–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã."""
    item_id = call.data.split("_", 1)[1]
    user_id = call.from_user.id
    group_id = get_or_create_group(user_id)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    item = execute_query(
        "SELECT item FROM lists WHERE item_id = ? AND group_id = ?",
        (item_id, group_id),
        fetchone=True,
    )
    if not item:
        bot.answer_callback_query(call.id, "‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    item = item[0]

    send_typing_action(call.message.chat.id)

    # –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã
    execute_query(
        "DELETE FROM lists WHERE item_id = ? AND group_id = ?", (item_id, group_id)
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
    notify_group_users(
        group_id,
        f'üóëÔ∏è *{escape_markdown(call.from_user.first_name)}* —É–¥–∞–ª–∏–ª —Ç–æ–≤–∞—Ä "*{escape_markdown(item)}*" –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫.',
        user_id,
    )

    bot.answer_callback_query(call.id, "üóëÔ∏è –≠–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω.")
    send_markdown_message(
        call.message.chat.id,
        f'üóëÔ∏è –¢–æ–≤–∞—Ä *"{escape_markdown(item)}"* –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫.',
    )

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
    show_list(call.message, user_id)


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
@bot.message_handler(func=lambda message: message.text == SHOPPING_LIST)
def show_list(message, user_id=None):
    if user_id is None:
        user_id = message.from_user.id
    group_id = get_or_create_group(user_id)

    # –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã
    items = execute_query(
        """SELECT item_id, item FROM lists WHERE group_id = ?""",
        (group_id,),
        fetch=True,
    )

    if items:
        item_list = ""
        markup = types.InlineKeyboardMarkup()
        for idx, (item_id, item) in enumerate(items, 1):
            item_text = f"‚Ä¢ {escape_markdown(item)}"
            item_list += item_text + "\n"
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            button = types.InlineKeyboardButton(
                text=f"‚ùå {item}", callback_data=f"delete_{item_id}"
            )
            markup.add(button)

        send_markdown_message(
            message.chat.id,
            f"üõí *–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫* ({len(items)} —Ç–æ–≤–∞—Ä–æ–≤):\n"
            "--------------------------------------\n"
            f"{item_list}"
            "--------------------------------------",
            reply_markup=markup,
        )
    else:
        send_markdown_message(
            message.chat.id,
            "üõí *–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç.*\n\n–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
        )

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    send_markdown_message(
        message.chat.id,
        "üîñ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä:*",
        reply_markup=main_menu(has_items=bool(items)),
    )


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞
@bot.message_handler(func=lambda message: message.text == CLEAR_LIST)
def confirm_clear_list(message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π —Å–ø–∏—Å–∫–∞."""
    buttons = [
        ("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", "confirm_clear"),
        ("‚ùå –û—Ç–º–µ–Ω–∞", "cancel"),
    ]
    prompt_user(
        message.chat.id,
        "üóëÔ∏è *–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –≤–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫?*",
        buttons,
    )


@bot.callback_query_handler(func=lambda call: call.data == "confirm_clear")
def clear_list(call):
    """–û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    user_id = call.from_user.id
    group_id = get_or_create_group(user_id)

    send_typing_action(call.message.chat.id)

    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã
    execute_query("DELETE FROM lists WHERE group_id = ?", (group_id,))
    bot.answer_callback_query(call.id, "üóëÔ∏è –°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω.")
    send_markdown_message(
        call.message.chat.id,
        "üóëÔ∏è *–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!*",
        reply_markup=main_menu(has_items=False),
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
    notify_group_users(
        group_id,
        f"üóëÔ∏è *{escape_markdown(call.from_user.first_name)}* –æ—á–∏—Å—Ç–∏–ª —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫!",
        user_id,
    )


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è
def handle_cancel_action(call):
    bot.answer_callback_query(call.id, "üîô –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    send_markdown_message(
        call.message.chat.id,
        "üîô *–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.*",
    )


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ data == "cancel"
@bot.callback_query_handler(func=lambda call: call.data == "cancel")
def cancel_action(call):
    handle_cancel_action(call)


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
@bot.message_handler(func=lambda message: message.text == ABOUT_APP)
def about_app(message):
    """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."""
    send_markdown_message(
        message.chat.id,
        "‚ÑπÔ∏è *–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏*\n\n"
        "ü§ñ *ShopBuddy* - –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞–º–∏ –ø–æ–∫—É–ø–æ–∫!\n\n"
        "–° –ø–æ–º–æ—â—å—é –º–µ–Ω—è –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ üìù –õ–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ —Å–ø–∏—Å–æ–∫.\n"
        "‚Ä¢ ‚ùå –£–¥–∞–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –æ–¥–Ω–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º.\n"
        "‚Ä¢ ü§ù –î–µ–ª–∏—Ç—å—Å—è —Å–ø–∏—Å–∫–æ–º —Å –±–ª–∏–∑–∫–∏–º–∏ –∏ –¥—Ä—É–∑—å—è–º–∏.\n"
        "‚Ä¢ üë§ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–ø–∏—Å–∫–∞.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º –∏—Ö —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å!",
    )


# –ü–æ–∫–∞–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–ø–∏—Å–∫–∞
@bot.message_handler(func=lambda message: message.text == VIEW_SHARED_USERS)
def show_shared_users(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —Å–ø–∏—Å–∫–æ–º."""
    user_id = message.from_user.id
    group_id = get_or_create_group(user_id)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ
    users = execute_query(
        """
        SELECT u.first_name, u.username FROM user_groups ug
        JOIN users u ON ug.user_id = u.user_id
        WHERE ug.group_id = ?
    """,
        (group_id,),
        fetch=True,
    )

    if users:
        user_list = "\n".join(
            [
                f"‚Ä¢ {escape_markdown(first_name)}{' (@' + escape_markdown(username) + ')' if username else ''}"
                for first_name, username in users
            ]
        )
        send_markdown_message(
            message.chat.id,
            f"üë• *–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫*:\n\n{user_list}",
        )
    else:
        send_markdown_message(
            message.chat.id,
            "‚ÑπÔ∏è *–í—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —Å–ø–∏—Å–∫–æ–º –Ω–∏ —Å –∫–µ–º.*",
        )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
def prompt_user(chat_id, text, buttons, state=None):
    markup = types.InlineKeyboardMarkup()
    for button_text, callback_data in buttons:
        markup.add(types.InlineKeyboardButton(button_text, callback_data=callback_data))
    send_markdown_message(chat_id, text, reply_markup=markup)
    if state:
        bot.set_state(chat_id, state)


if __name__ == "__main__":
    create_tables()
    # –ë–æ—Ç –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –∏–∑ main.py
